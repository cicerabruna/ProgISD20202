# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q1v2pHX4LYa02kyEyyQadC2rvKtwyGOK
"""

import os

import numpy as np
import matplotlib.pyplot as plt

try:
    from nibabel import load
except ImportError:
    raise ImportError('You need nibabel (http:/nipy.org/nibabel/) in order to run this example')

!pip install nitime

import nitime
import nitime.analysis as nta
import nitime.fmri.io as io

def parametros():
  TR = float(input('Informe o valor do TR [1.35]: '))
  f_lb = float(input('Informe o valor de f_lb [0.02]: '))
  f_ub = float(input('Informe o valor de f_lb [0.15]: '))
  return TR, f_lb, f_ub

TR, f_lb, f_ub = parametros()

data_path = test_dir_path = os.path.join(nitime.__path__[0], 'data')

fmri_file = os.path.join(data_path, 'fmri1.nii.gz')

fmri_data = load(fmri_file)

volume_shape = fmri_data.shape[:-1]

coords = list(np.ndindex(volume_shape))

n_seeds = 3

seeds = np.random.randint(0, len(coords), n_seeds)
coords_seeds = np.array(coords)[seeds].T

coords_target = np.array(coords).T

time_series_seed = io.time_series_from_file(fmri_file, coords_seeds, TR=TR, normalize='percent', filter=dict(lb=f_lb, ub=f_ub, method='boxcar'))

time_series_target = io.time_series_from_file(fmri_file, coords_target, TR=TR, normalize='percent',filter=dict(lb=f_lb, ub=f_ub, method='boxcar'))

A = nta.SeedCoherenceAnalyzer(time_series_seed, time_series_target, method=dict(NFFT=20))

B = nta.SeedCorrelationAnalyzer(time_series_seed, time_series_target)

freq_idx = np.where((A.frequencies > f_lb) * (A.frequencies < f_ub))[0]

cor = []
coh = []
for this_seed in range(n_seeds):
  coh.append(np.mean(A.coherence[this_seed][:, freq_idx], -1))  
  cor.append(B.corrcoef[this_seed])

coords_indices = list(coords_target)

vol_coh = []
vol_cor = []
for this_vol in range(n_seeds):
    vol_coh.append(np.empty(volume_shape))
    vol_coh[-1][coords_indices] = coh[this_vol]
    vol_cor.append(np.empty(volume_shape))
    vol_cor[-1][coords_indices] = cor[this_vol]

random_slice = np.random.randint(0, volume_shape[-1], 1)

fig01 = plt.figure()
fig02 = plt.figure()
ax_coh = []
ax_cor = []
for this_vox in range(n_seeds):
    ax_coh.append(fig01.add_subplot(1, n_seeds, this_vox + 1))
    ax_coh[-1].matshow(vol_coh[this_vox][:, :, random_slice].squeeze())
    ax_coh[-1].set_title('Seed coords: %s' % coords_seeds[:, this_vox])

    ax_cor.append(fig02.add_subplot(1, n_seeds, this_vox + 1))
    ax_cor[-1].matshow(vol_cor[this_vox][:, :, random_slice].squeeze())
    ax_cor[-1].set_title('Seed coords: %s' % coords_seeds[:, this_vox])

for x in zip(['Coherence', 'Correlation'], [fig01, fig02]):
    suptit = '%s between all the voxels in slice: ' % x[0]
    suptit += '%i and seed voxels' % random_slice
    x[1].suptitle(suptit)

plt.show()